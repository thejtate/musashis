<?php
/**
 * @file Wc ShushiNeko custom functionality
 */


/**
 * Implements hook_menu().
 */
function wc_events_menu() {
  $items['admin/config/wc_events'] = array(
    'title' => 'Wc Events Configuration',
    'description' => 'Wc Events Configuration page',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wc_events_site_setings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wc_events.admin.inc',
  );

  $items['wc_events/get/%/%'] = array(
    'title' => 'Events',
    'page callback' => 'wc_events_get',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/****************************************************************************************************************
 * HOST
 ****************************************************************************************************************/

/**
 * Menu callback, get events by conditions
 *
 * @param string $event_type
 *  Restaurant taxonomy id
 * @param int $count
 * @param string $event_date
 *  Event date filter, available date formats: for year search "Y", for month search  "Y-m", for Day search  "Y-m-d"
 *  Is used for thetastingroomokc.com calendar
 */
function wc_events_get($event_type = "", $count = 10, $event_date = '') {
  $type = variable_get('wc_events_type', 0);
  $output = array();
  if ($type == 'host') {
    $node_type = variable_get('wc_events_host_node_type', '');

    $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $node_type)
      ->condition('status', 1);

    $query->join('field_data_field_event_restaurant', 'r', 'r.entity_id = n.nid');
    $query->fields('r', array('field_event_restaurant_target_id'));
    $query->join('field_data_field_event_date_time', 'd','d.entity_id = n.nid');
    $query->fields('d', array('field_event_date_time_value', 'delta'));

    $query->condition('r.field_event_restaurant_target_id', $event_type);

    if (!empty($event_date)) {
      //display event for given date
      $query->condition('d.field_event_date_time_value', $event_date . '%', 'LIKE');
    } else {
      //display upcoming events
      $date_now = new DateTime('now', new DateTimeZone('UTC'));
      $query->where('d.field_event_date_time_value > :now', array(':now' => $date_now->format(DATE_FORMAT_DATETIME)));
    }

    $query->orderBy('d.field_event_date_time_value', 'ASC');

    if ($count != 0) {
      $query->range(0, $count);
    }

    drupal_alter("get_events_entities", $query, $event_type, $event_date);

    $result = $query->execute()
      ->fetchAll();
    foreach ($result as $item) {
      $node = node_load($item->nid);

      $new_node = clone($node);
      if(!empty($node->field_event_date_time[LANGUAGE_NONE])) {
        //leave only One current date in node
        $new_node->field_event_date_time[LANGUAGE_NONE] = array(
          $new_node->field_event_date_time[LANGUAGE_NONE][$item->delta],
        );
      }
      $output[] = $new_node;
    }
  }

  drupal_json_output($output);
}

/****************************************************************************************************************
 * Client
 ****************************************************************************************************************/

/**
 * Implements hook_block_info().
 */
function wc_events_block_info() {
  $blocks['wc_events_events'] = array(
    'info' => t('Last Events'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function wc_events_block_view($delta = '') {
  // Check if the current user has access.
  switch ($delta) {
    case 'wc_events_events':
      $block['subject'] = t('Events');
      $block['content'] = wc_events_custom_get_events();
      return $block;
      break;
  }
}


/**
 * Implements hook_theme().
 */
function wc_events_theme() {
  $path = drupal_get_path('module', 'wc_events');
  return array(
    'wc_events_list' => array(
      'variables' => array('content' => NULL),
      'path' => $path . '/templates',
      'template' => 'wc_events_list',
    ),
  );
}


function wc_events_custom_get_events() {
  $host = variable_get('client_wc_events_host', '');
  $event_type = variable_get('client_wc_events_type', 1);
  $count = variable_get('client_wc_events_count', 2);
  $trim = variable_get('client_wc_events_trim', 0);
  $type = variable_get('wc_events_type', 0);
  $content = "";
  if ($type == 'host') {
    return t("Module configured as host. Please choose 'client' type for use this block.");
  }

  if (!empty($host)) {
    $url = rtrim($host, "/") . "/" . "wc_events/get/$event_type/$count";
    $data = drupal_http_request($url);
    if (isset($data->code) && $data->code == 200) {
      $json = isset($data->data) ? $data->data : "[]";
      $nodes = json_decode($json);
      foreach ($nodes as $node) {
        if (!empty($trim) && is_numeric($trim)) {
          if(!empty($node->field_event_description->und[0]->value )) {
            $text = strip_tags($node->field_event_description->und[0]->value);
            $node->field_event_description->und[0]->value = truncate_utf8($text, $trim, FALSE, TRUE);
          }
        }
        $content_view = node_view($node, "events");
        $content .= render($content_view);
      }
    }
  }
  return theme("wc_events_list", array("content" => $content));
}